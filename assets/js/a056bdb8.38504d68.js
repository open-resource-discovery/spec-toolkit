"use strict";(self.webpackChunk_open_resource_discovery_spec_toolkit_website=self.webpackChunk_open_resource_discovery_spec_toolkit_website||[]).push([[3153],{9582:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"docs/getting-started","title":"Getting Started","description":"While writing a JSON Schema specification the wish may arise to be able to make some separation of concerns, grouping by definitions categories, or reusing specific definitions.","source":"@site/docs/docs/getting-started.md","sourceDirName":"docs","slug":"/docs/getting-started","permalink":"/spec-toolkit/docs/getting-started","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"sidebar_collapsible":false,"sidebar_collapsed":false},"sidebar":"defaultSidebar","previous":{"title":"Documentation","permalink":"/spec-toolkit/docs/"},"next":{"title":"JSON Schema Specification","permalink":"/spec-toolkit/docs/spec"}}');var s=t(4848),o=t(8453);const r={sidebar_position:1,sidebar_collapsible:!1,sidebar_collapsed:!1},c="Getting Started",a={},d=[];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,s.jsx)(n.p,{children:"While writing a JSON Schema specification the wish may arise to be able to make some separation of concerns, grouping by definitions categories, or reusing specific definitions.\nSome of the specification definitions may be governed by dedicated authors which have the business domain specific knowledge."}),"\n",(0,s.jsx)(n.p,{children:"This is the reason why spec-toolkit supports two types of files:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"JSON Schema specifications"}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.em,{children:"extensions"})," for a JSON Schema specification that should be merged into JSON Schema specification. JSON Schema specifications ",(0,s.jsx)(n.em,{children:"Extensions"})," are ",(0,s.jsx)(n.em,{children:"optional"})," and intended to support advanced spec-toolkit use cases."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Such a specification writing process will be described below:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Start by writing a JSON Schema yaml file defining your interface. Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'$schema: "https://open-resource-discovery.github.io/spec-toolkit/spec-v1/spec.schema.json#"\ntitle: Bookstore Document\ndescription: |-\n  This is the interface description of a Bookstore v1.\n  Its purpose is to describe all properties allowed to be maintained for a Bookstore document.\ntype: object\nproperties:\n  $schema:\n    type: string\n    format: uri-reference\n    description: |\n      Link to the JSON Schema for this Bookstore document.\n      Adding this helps with automatic validation and code intelligence in some editors / IDEs.\n  $id:\n    type: string\n    format: uri-reference\n    description: |\n      Optional URI for this document, that can acts as an ID or as location to retrieve the document.\n  title:\n    type: string\n    description: Descriptive title for the Bookstore.\n  books:\n    type: array\n    description: Book items for the Bookstore.\n    items:\n     $ref: "#/definitions/Book"\n    minItems: 1\nrequired:\n  - books\nadditionalProperties: false\n\ndefinitions:\n  Book:\n    type: object\n    properties:\n      author:\n        type: string\n        description: The book author full name.\n      genre:\n        $ref: "#/definitions/Genre"\n  Genre:\n    type: object\n    description: Definition of book genre.\n    properties:\n      type:\n        type: string\n        enum:\n          - "drama"\n          - "comedy"\n          - "action"\n        description: |-\n          The book item genre type.\n          It\'s value is been used as a _discriminator_ to distinguish the matching book genre.\n    required:\n      - type\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Optional (can be omitted for a simple use case)"})," write a JSON Schema ",(0,s.jsx)(n.em,{children:"extension"})," yaml file that should be merged into the ",(0,s.jsx)(n.em,{children:"main"})," JSON Schema file. Example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'$schema: "http://json-schema.org/draft-07/schema#"\ntitle: Author Document\ndescription: This is the interface description of Author.\ntype: object\ndefinitions:\n  Author:\n    type: object\n    description: The definition defines how an author object shall be constructed.\n    properties:\n      name:\n        type: string\n      birthDate:\n        type: date\n      bankAccount:\n        type: string\n      contract:\n        type: string\n        enum:\n          - "freelancer"\n          - "employee"\n    required:\n      - name\n    x-extension-targets:\n      - Book\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Define a spec-toolkit configuration file so that the CLI tool can identify how to generate the documentation. Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsonc",children:'{\n "$schema": "https://open-resource-discovery.github.io/spec-toolkit/spec-v1/spec-toolkit-config.schema.json#",\n  "generalConfig": {\n    "sortProperties": false\n  },\n  "outputPath": "src/generated/spec-v1",\n  "docsConfig": [\n    {\n      "type": "spec",\n      "id": "spec-bookstore",\n      "sourceFilePath": "./spec/v1/bookstore.schema.yaml",\n      "mdFrontmatter": {\n        "title": "Bookstore",\n        "description": "Describes the technical interface / schema for the Bookstore."\n      }\n    },\n    // highlight-start\n    // Optional part (can be omitted for a simple use case):\n    // specify how to merge the _extension_ JSON Schema into the _main_ JSON Schema and generate the documentation\n    {\n      "type": "specExtension",\n      "id": "spec-author",\n      "sourceFilePath": "./spec/v1/author.schema.yaml",\n      "mdFrontmatter": {\n        "title": "Author",\n        "description": "Describes the technical interface / schema for the Author."\n      }\n    }\n    // highlight-end\n  ]\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Execute the spec-toolkit CLI tool (check ",(0,s.jsx)(n.a,{href:"https://github.com/open-resource-discovery/spec-toolkit/docs/spec-toolkit-config#prerequisite",children:"prerequisite"})," first)"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"npx @open-resource-discovery/spec-toolkit -c ./spec-toolkit.config.json\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Inspect the spec-toolkit CLI tool generated output and use it for further processing.\nThe tool generates 3 things:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"markdown documentation files for each of the provided main spec and spec extension files"}),"\n",(0,s.jsxs)(n.li,{children:["JSON Schema files in ",(0,s.jsx)(n.code,{children:".json"})," format"]}),"\n",(0,s.jsx)(n.li,{children:"Typescript types interfaces"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);